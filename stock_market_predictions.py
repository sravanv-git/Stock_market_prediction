# -*- coding: utf-8 -*-
"""stock_market_predictions.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1mPkjqBRoorPYrmW5nNILdEq_LqfITH5K
"""

from tensorflow.python.keras.engine.sequential import Sequential
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
#!pip install tensorflow-gpu
import tensorflow as tf
from tensorflow.keras import layers
import tensorflow.keras as keras
from sklearn.model_selection import train_test_split

data=pd.read_excel("Extract.xls")
input_=pd.read_csv("test.csv")
def sds(data):
  if "y" in data:
    output=data["y"]
  open_=data["x1"]
  high=data["x2"]
  low=data["x3"]
  close=data["x4"]
  x1=(close-open_)/(high-low)*10
  x2=close/open_*10
  x3=high/close*10
  x4=open_/low*10
  close_open=close-open_
  high_low=high-low
  dataUse=pd.DataFrame()#,columns=
  dataUse["x1"]=x1
  dataUse["x2"]=x2
  dataUse["x3"]=x3
  dataUse["x4"]=x4
  if "y" in data:
    dataUse["y"]=output
  dataUse["Close-Open"]=close_open
  dataUse["High-Low"]=high_low
  dataUse["Close"]=close
  return dataUse
dataUse=sds(data)
dataUse_=sds(input_)

dataUse

dataFiltered=dataUse[abs(dataUse["Close-Open"]*dataUse["High-Low"])>(2/4000)*dataUse["Close"]]
dataFiltered_=dataUse_[abs(dataUse_["Close-Open"]*dataUse_["High-Low"])>(2/4000)*dataUse_["Close"]]
dataFiltered

len(dataFiltered)/len(dataUse)*100

train, test = train_test_split(dataFiltered, test_size=0.2)

train.iloc[:,:4]

model = keras.Sequential()
model.add(layers.Dense(4, activation="relu"))
model.add(layers.Dense(9, activation="relu"))
model.add(layers.Dense(15, activation="relu"))
model.add(layers.Dense(7, activation="relu"))
model.add(layers.Dense(5, activation="relu"))
model.add(layers.Dense(1))

model.compile(optimizer='adam', 
              loss='mean_squared_error', 
              metrics=['accuracy'])

model.fit(train.iloc[:,:4],train.iloc[:,4:5],epochs=60,batch_size=100)

model.evaluate(test.iloc[:,:4],test.iloc[:,4:5])

model.evaluate(train.iloc[:,:4],train.iloc[:,4:5])

model.save("model.h5")

prediction=np.where(model.predict(dataUse_.iloc[:,:4])>0.5,1,0)

np.where(np.array([0.3])>0.5,1,0)

pd.DataFrame(data=prediction).to_csv("prediction.csv")



