{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "name": "Untitled3 (1).ipynb",
      "provenance": [],
      "collapsed_sections": []
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "ymP1CdZTAaWC"
      },
      "outputs": [],
      "source": [
        "from tensorflow.python.keras.engine.sequential import Sequential\n",
        "import pandas as pd\n",
        "import numpy as np\n",
        "import matplotlib.pyplot as plt\n",
        "#!pip install tensorflow-gpu\n",
        "import tensorflow as tf\n",
        "from tensorflow.keras import layers\n",
        "import tensorflow.keras as keras\n",
        "from sklearn.model_selection import train_test_split"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "data=pd.read_excel(\"Extract.xls\")\n",
        "input_=pd.read_csv(\"test.csv\")\n",
        "def sds(data):\n",
        "  if \"y\" in data:\n",
        "    output=data[\"y\"]\n",
        "  open_=data[\"x1\"]\n",
        "  high=data[\"x2\"]\n",
        "  low=data[\"x3\"]\n",
        "  close=data[\"x4\"]\n",
        "  x1=(close-open_)/(high-low)*10\n",
        "  x2=close/open_*10\n",
        "  x3=high/close*10\n",
        "  x4=open_/low*10\n",
        "  close_open=close-open_\n",
        "  high_low=high-low\n",
        "  dataUse=pd.DataFrame()#,columns=\n",
        "  dataUse[\"x1\"]=x1\n",
        "  dataUse[\"x2\"]=x2\n",
        "  dataUse[\"x3\"]=x3\n",
        "  dataUse[\"x4\"]=x4\n",
        "  if \"y\" in data:\n",
        "    dataUse[\"y\"]=output\n",
        "  dataUse[\"Close-Open\"]=close_open\n",
        "  dataUse[\"High-Low\"]=high_low\n",
        "  dataUse[\"Close\"]=close\n",
        "  return dataUse\n",
        "dataUse=sds(data)\n",
        "dataUse_=sds(input_)"
      ],
      "metadata": {
        "id": "pKucmZdFAjcf"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "dataUse"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 424
        },
        "id": "mez7kVpYD6Wa",
        "outputId": "d9d72a21-707c-4072-9305-fd7163aa636d"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/html": [
              "\n",
              "  <div id=\"df-996defc7-fc2e-4fe1-b287-28c6b54e4651\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>x1</th>\n",
              "      <th>x2</th>\n",
              "      <th>x3</th>\n",
              "      <th>x4</th>\n",
              "      <th>y</th>\n",
              "      <th>Close-Open</th>\n",
              "      <th>High-Low</th>\n",
              "      <th>Close</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>1.758242</td>\n",
              "      <td>10.000414</td>\n",
              "      <td>10.000725</td>\n",
              "      <td>10.001217</td>\n",
              "      <td>0</td>\n",
              "      <td>0.16</td>\n",
              "      <td>0.91</td>\n",
              "      <td>3861.38</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>0.491803</td>\n",
              "      <td>10.000155</td>\n",
              "      <td>10.000337</td>\n",
              "      <td>10.002668</td>\n",
              "      <td>0</td>\n",
              "      <td>0.06</td>\n",
              "      <td>1.22</td>\n",
              "      <td>3861.25</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>-9.793814</td>\n",
              "      <td>9.992619</td>\n",
              "      <td>10.007386</td>\n",
              "      <td>10.007542</td>\n",
              "      <td>0</td>\n",
              "      <td>-2.85</td>\n",
              "      <td>2.91</td>\n",
              "      <td>3858.53</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>-3.136095</td>\n",
              "      <td>9.998626</td>\n",
              "      <td>10.001374</td>\n",
              "      <td>10.004382</td>\n",
              "      <td>1</td>\n",
              "      <td>-0.53</td>\n",
              "      <td>1.69</td>\n",
              "      <td>3858.19</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>6.371681</td>\n",
              "      <td>10.001866</td>\n",
              "      <td>10.000907</td>\n",
              "      <td>10.000156</td>\n",
              "      <td>1</td>\n",
              "      <td>0.72</td>\n",
              "      <td>1.13</td>\n",
              "      <td>3858.81</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>9995</th>\n",
              "      <td>1.040000</td>\n",
              "      <td>10.000343</td>\n",
              "      <td>10.000316</td>\n",
              "      <td>10.002636</td>\n",
              "      <td>0</td>\n",
              "      <td>0.13</td>\n",
              "      <td>1.25</td>\n",
              "      <td>3794.88</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>9996</th>\n",
              "      <td>-1.071429</td>\n",
              "      <td>9.999842</td>\n",
              "      <td>10.000975</td>\n",
              "      <td>10.000659</td>\n",
              "      <td>1</td>\n",
              "      <td>-0.06</td>\n",
              "      <td>0.56</td>\n",
              "      <td>3794.72</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>9997</th>\n",
              "      <td>2.580645</td>\n",
              "      <td>10.000422</td>\n",
              "      <td>10.000474</td>\n",
              "      <td>10.000738</td>\n",
              "      <td>0</td>\n",
              "      <td>0.16</td>\n",
              "      <td>0.62</td>\n",
              "      <td>3794.91</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>9998</th>\n",
              "      <td>-3.428571</td>\n",
              "      <td>9.998419</td>\n",
              "      <td>10.002082</td>\n",
              "      <td>10.004112</td>\n",
              "      <td>1</td>\n",
              "      <td>-0.60</td>\n",
              "      <td>1.75</td>\n",
              "      <td>3794.34</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>9999</th>\n",
              "      <td>2.666667</td>\n",
              "      <td>10.000422</td>\n",
              "      <td>10.000501</td>\n",
              "      <td>10.000659</td>\n",
              "      <td>0</td>\n",
              "      <td>0.16</td>\n",
              "      <td>0.60</td>\n",
              "      <td>3794.47</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>10000 rows Ã— 8 columns</p>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-996defc7-fc2e-4fe1-b287-28c6b54e4651')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-996defc7-fc2e-4fe1-b287-28c6b54e4651 button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-996defc7-fc2e-4fe1-b287-28c6b54e4651');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ],
            "text/plain": [
              "            x1         x2         x3  ...  Close-Open  High-Low    Close\n",
              "0     1.758242  10.000414  10.000725  ...        0.16      0.91  3861.38\n",
              "1     0.491803  10.000155  10.000337  ...        0.06      1.22  3861.25\n",
              "2    -9.793814   9.992619  10.007386  ...       -2.85      2.91  3858.53\n",
              "3    -3.136095   9.998626  10.001374  ...       -0.53      1.69  3858.19\n",
              "4     6.371681  10.001866  10.000907  ...        0.72      1.13  3858.81\n",
              "...        ...        ...        ...  ...         ...       ...      ...\n",
              "9995  1.040000  10.000343  10.000316  ...        0.13      1.25  3794.88\n",
              "9996 -1.071429   9.999842  10.000975  ...       -0.06      0.56  3794.72\n",
              "9997  2.580645  10.000422  10.000474  ...        0.16      0.62  3794.91\n",
              "9998 -3.428571   9.998419  10.002082  ...       -0.60      1.75  3794.34\n",
              "9999  2.666667  10.000422  10.000501  ...        0.16      0.60  3794.47\n",
              "\n",
              "[10000 rows x 8 columns]"
            ]
          },
          "metadata": {},
          "execution_count": 32
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "dataFiltered=dataUse[abs(dataUse[\"Close-Open\"]*dataUse[\"High-Low\"])>(2/4000)*dataUse[\"Close\"]]\n",
        "dataFiltered_=dataUse_[abs(dataUse_[\"Close-Open\"]*dataUse_[\"High-Low\"])>(2/4000)*dataUse_[\"Close\"]]\n",
        "dataFiltered"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 424
        },
        "id": "3_XgX46JFM0M",
        "outputId": "f5753edf-c8da-430f-8653-8bc717fd328b"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/html": [
              "\n",
              "  <div id=\"df-5021088a-5c95-44c8-ae2a-371283494289\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>x1</th>\n",
              "      <th>x2</th>\n",
              "      <th>x3</th>\n",
              "      <th>x4</th>\n",
              "      <th>y</th>\n",
              "      <th>Close-Open</th>\n",
              "      <th>High-Low</th>\n",
              "      <th>Close</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>-9.793814</td>\n",
              "      <td>9.992619</td>\n",
              "      <td>10.007386</td>\n",
              "      <td>10.007542</td>\n",
              "      <td>0</td>\n",
              "      <td>-2.85</td>\n",
              "      <td>2.91</td>\n",
              "      <td>3858.53</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>8</th>\n",
              "      <td>8.909091</td>\n",
              "      <td>10.003810</td>\n",
              "      <td>10.000311</td>\n",
              "      <td>10.000155</td>\n",
              "      <td>1</td>\n",
              "      <td>1.47</td>\n",
              "      <td>1.65</td>\n",
              "      <td>3860.19</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>14</th>\n",
              "      <td>7.518797</td>\n",
              "      <td>10.005182</td>\n",
              "      <td>10.000570</td>\n",
              "      <td>10.001140</td>\n",
              "      <td>1</td>\n",
              "      <td>2.00</td>\n",
              "      <td>2.66</td>\n",
              "      <td>3861.69</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>20</th>\n",
              "      <td>8.855422</td>\n",
              "      <td>10.003807</td>\n",
              "      <td>10.000492</td>\n",
              "      <td>10.000000</td>\n",
              "      <td>1</td>\n",
              "      <td>1.47</td>\n",
              "      <td>1.66</td>\n",
              "      <td>3863.03</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>21</th>\n",
              "      <td>6.649746</td>\n",
              "      <td>10.003391</td>\n",
              "      <td>10.000725</td>\n",
              "      <td>10.000984</td>\n",
              "      <td>1</td>\n",
              "      <td>1.31</td>\n",
              "      <td>1.97</td>\n",
              "      <td>3864.47</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>9924</th>\n",
              "      <td>9.272727</td>\n",
              "      <td>10.004041</td>\n",
              "      <td>10.000317</td>\n",
              "      <td>10.000000</td>\n",
              "      <td>1</td>\n",
              "      <td>1.53</td>\n",
              "      <td>1.65</td>\n",
              "      <td>3787.72</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>9928</th>\n",
              "      <td>8.537736</td>\n",
              "      <td>10.004776</td>\n",
              "      <td>10.000818</td>\n",
              "      <td>10.000000</td>\n",
              "      <td>0</td>\n",
              "      <td>1.81</td>\n",
              "      <td>2.12</td>\n",
              "      <td>3791.28</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>9929</th>\n",
              "      <td>-8.133333</td>\n",
              "      <td>9.993564</td>\n",
              "      <td>10.007338</td>\n",
              "      <td>10.007022</td>\n",
              "      <td>1</td>\n",
              "      <td>-2.44</td>\n",
              "      <td>3.00</td>\n",
              "      <td>3788.53</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>9936</th>\n",
              "      <td>9.375000</td>\n",
              "      <td>10.003563</td>\n",
              "      <td>10.000237</td>\n",
              "      <td>10.000000</td>\n",
              "      <td>0</td>\n",
              "      <td>1.35</td>\n",
              "      <td>1.44</td>\n",
              "      <td>3790.63</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>9985</th>\n",
              "      <td>-7.819149</td>\n",
              "      <td>9.996126</td>\n",
              "      <td>10.004535</td>\n",
              "      <td>10.004298</td>\n",
              "      <td>1</td>\n",
              "      <td>-1.47</td>\n",
              "      <td>1.88</td>\n",
              "      <td>3792.94</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>2375 rows Ã— 8 columns</p>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-5021088a-5c95-44c8-ae2a-371283494289')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-5021088a-5c95-44c8-ae2a-371283494289 button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-5021088a-5c95-44c8-ae2a-371283494289');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ],
            "text/plain": [
              "            x1         x2         x3  ...  Close-Open  High-Low    Close\n",
              "2    -9.793814   9.992619  10.007386  ...       -2.85      2.91  3858.53\n",
              "8     8.909091  10.003810  10.000311  ...        1.47      1.65  3860.19\n",
              "14    7.518797  10.005182  10.000570  ...        2.00      2.66  3861.69\n",
              "20    8.855422  10.003807  10.000492  ...        1.47      1.66  3863.03\n",
              "21    6.649746  10.003391  10.000725  ...        1.31      1.97  3864.47\n",
              "...        ...        ...        ...  ...         ...       ...      ...\n",
              "9924  9.272727  10.004041  10.000317  ...        1.53      1.65  3787.72\n",
              "9928  8.537736  10.004776  10.000818  ...        1.81      2.12  3791.28\n",
              "9929 -8.133333   9.993564  10.007338  ...       -2.44      3.00  3788.53\n",
              "9936  9.375000  10.003563  10.000237  ...        1.35      1.44  3790.63\n",
              "9985 -7.819149   9.996126  10.004535  ...       -1.47      1.88  3792.94\n",
              "\n",
              "[2375 rows x 8 columns]"
            ]
          },
          "metadata": {},
          "execution_count": 33
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "len(dataFiltered)/len(dataUse)*100"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "wnCBMIDqFPPT",
        "outputId": "15d010ed-c4f2-4f9e-c37e-dffcd24673d2"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "23.75"
            ]
          },
          "metadata": {},
          "execution_count": 34
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "train, test = train_test_split(dataFiltered, test_size=0.2)"
      ],
      "metadata": {
        "id": "MNp6o22eHkJf"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "train.iloc[:,:4]"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 424
        },
        "id": "NKkrxBruKL4Y",
        "outputId": "840b21d6-f875-4a10-e10e-3d1ee3197202"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/html": [
              "\n",
              "  <div id=\"df-68592091-2561-4aaa-8069-3bda5083ec98\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>x1</th>\n",
              "      <th>x2</th>\n",
              "      <th>x3</th>\n",
              "      <th>x4</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>1958</th>\n",
              "      <td>-3.943662</td>\n",
              "      <td>9.997107</td>\n",
              "      <td>10.002894</td>\n",
              "      <td>10.007341</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>5581</th>\n",
              "      <td>8.800000</td>\n",
              "      <td>10.003363</td>\n",
              "      <td>10.000229</td>\n",
              "      <td>10.000229</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>9482</th>\n",
              "      <td>-6.463415</td>\n",
              "      <td>9.995784</td>\n",
              "      <td>10.006366</td>\n",
              "      <td>10.004377</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4453</th>\n",
              "      <td>-7.648903</td>\n",
              "      <td>9.993808</td>\n",
              "      <td>10.007796</td>\n",
              "      <td>10.006501</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>5671</th>\n",
              "      <td>-9.600000</td>\n",
              "      <td>9.996339</td>\n",
              "      <td>10.003663</td>\n",
              "      <td>10.003815</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>9156</th>\n",
              "      <td>-8.168605</td>\n",
              "      <td>9.992593</td>\n",
              "      <td>10.008811</td>\n",
              "      <td>10.007677</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>387</th>\n",
              "      <td>9.038462</td>\n",
              "      <td>10.003645</td>\n",
              "      <td>10.000078</td>\n",
              "      <td>10.000310</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>6832</th>\n",
              "      <td>-7.123288</td>\n",
              "      <td>9.995945</td>\n",
              "      <td>10.005695</td>\n",
              "      <td>10.004056</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4581</th>\n",
              "      <td>-7.844828</td>\n",
              "      <td>9.995391</td>\n",
              "      <td>10.005878</td>\n",
              "      <td>10.004612</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>8485</th>\n",
              "      <td>8.366013</td>\n",
              "      <td>10.003425</td>\n",
              "      <td>10.000669</td>\n",
              "      <td>10.000000</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>1900 rows Ã— 4 columns</p>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-68592091-2561-4aaa-8069-3bda5083ec98')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-68592091-2561-4aaa-8069-3bda5083ec98 button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-68592091-2561-4aaa-8069-3bda5083ec98');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ],
            "text/plain": [
              "            x1         x2         x3         x4\n",
              "1958 -3.943662   9.997107  10.002894  10.007341\n",
              "5581  8.800000  10.003363  10.000229  10.000229\n",
              "9482 -6.463415   9.995784  10.006366  10.004377\n",
              "4453 -7.648903   9.993808  10.007796  10.006501\n",
              "5671 -9.600000   9.996339  10.003663  10.003815\n",
              "...        ...        ...        ...        ...\n",
              "9156 -8.168605   9.992593  10.008811  10.007677\n",
              "387   9.038462  10.003645  10.000078  10.000310\n",
              "6832 -7.123288   9.995945  10.005695  10.004056\n",
              "4581 -7.844828   9.995391  10.005878  10.004612\n",
              "8485  8.366013  10.003425  10.000669  10.000000\n",
              "\n",
              "[1900 rows x 4 columns]"
            ]
          },
          "metadata": {},
          "execution_count": 36
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "model = keras.Sequential()\n",
        "model.add(layers.Dense(4, activation=\"relu\"))\n",
        "model.add(layers.Dense(9, activation=\"relu\"))\n",
        "model.add(layers.Dense(15, activation=\"relu\"))\n",
        "model.add(layers.Dense(7, activation=\"relu\"))\n",
        "model.add(layers.Dense(5, activation=\"relu\"))\n",
        "model.add(layers.Dense(1))"
      ],
      "metadata": {
        "id": "ONqVXen_IXc0"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "model.compile(optimizer='adam', \n",
        "              loss='mean_squared_error', \n",
        "              metrics=['accuracy'])"
      ],
      "metadata": {
        "id": "cafF7RakJJHM"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "model.fit(train.iloc[:,:4],train.iloc[:,4:5],epochs=60,batch_size=100)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "Y0vLji97JirE",
        "outputId": "8c2c2c2f-2c36-40e9-88ff-d18954134333"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Epoch 1/60\n",
            "19/19 [==============================] - 1s 2ms/step - loss: 0.4221 - accuracy: 0.4800\n",
            "Epoch 2/60\n",
            "19/19 [==============================] - 0s 2ms/step - loss: 0.2876 - accuracy: 0.4800\n",
            "Epoch 3/60\n",
            "19/19 [==============================] - 0s 2ms/step - loss: 0.2508 - accuracy: 0.5184\n",
            "Epoch 4/60\n",
            "19/19 [==============================] - 0s 2ms/step - loss: 0.2494 - accuracy: 0.5105\n",
            "Epoch 5/60\n",
            "19/19 [==============================] - 0s 3ms/step - loss: 0.2484 - accuracy: 0.5289\n",
            "Epoch 6/60\n",
            "19/19 [==============================] - 0s 13ms/step - loss: 0.2487 - accuracy: 0.5163\n",
            "Epoch 7/60\n",
            "19/19 [==============================] - 0s 2ms/step - loss: 0.2485 - accuracy: 0.5326\n",
            "Epoch 8/60\n",
            "19/19 [==============================] - 0s 2ms/step - loss: 0.2484 - accuracy: 0.5311\n",
            "Epoch 9/60\n",
            "19/19 [==============================] - 0s 2ms/step - loss: 0.2484 - accuracy: 0.5326\n",
            "Epoch 10/60\n",
            "19/19 [==============================] - 0s 2ms/step - loss: 0.2485 - accuracy: 0.5305\n",
            "Epoch 11/60\n",
            "19/19 [==============================] - 0s 3ms/step - loss: 0.2484 - accuracy: 0.5289\n",
            "Epoch 12/60\n",
            "19/19 [==============================] - 0s 3ms/step - loss: 0.2486 - accuracy: 0.5305\n",
            "Epoch 13/60\n",
            "19/19 [==============================] - 0s 3ms/step - loss: 0.2485 - accuracy: 0.5305\n",
            "Epoch 14/60\n",
            "19/19 [==============================] - 0s 2ms/step - loss: 0.2485 - accuracy: 0.5279\n",
            "Epoch 15/60\n",
            "19/19 [==============================] - 0s 2ms/step - loss: 0.2486 - accuracy: 0.5279\n",
            "Epoch 16/60\n",
            "19/19 [==============================] - 0s 3ms/step - loss: 0.2485 - accuracy: 0.5284\n",
            "Epoch 17/60\n",
            "19/19 [==============================] - 0s 3ms/step - loss: 0.2485 - accuracy: 0.5374\n",
            "Epoch 18/60\n",
            "19/19 [==============================] - 0s 2ms/step - loss: 0.2484 - accuracy: 0.5389\n",
            "Epoch 19/60\n",
            "19/19 [==============================] - 0s 2ms/step - loss: 0.2484 - accuracy: 0.5321\n",
            "Epoch 20/60\n",
            "19/19 [==============================] - 0s 3ms/step - loss: 0.2485 - accuracy: 0.5321\n",
            "Epoch 21/60\n",
            "19/19 [==============================] - 0s 3ms/step - loss: 0.2484 - accuracy: 0.5316\n",
            "Epoch 22/60\n",
            "19/19 [==============================] - 0s 2ms/step - loss: 0.2486 - accuracy: 0.5284\n",
            "Epoch 23/60\n",
            "19/19 [==============================] - 0s 2ms/step - loss: 0.2486 - accuracy: 0.5353\n",
            "Epoch 24/60\n",
            "19/19 [==============================] - 0s 2ms/step - loss: 0.2485 - accuracy: 0.5337\n",
            "Epoch 25/60\n",
            "19/19 [==============================] - 0s 2ms/step - loss: 0.2484 - accuracy: 0.5274\n",
            "Epoch 26/60\n",
            "19/19 [==============================] - 0s 2ms/step - loss: 0.2483 - accuracy: 0.5311\n",
            "Epoch 27/60\n",
            "19/19 [==============================] - 0s 2ms/step - loss: 0.2485 - accuracy: 0.5305\n",
            "Epoch 28/60\n",
            "19/19 [==============================] - 0s 2ms/step - loss: 0.2485 - accuracy: 0.5353\n",
            "Epoch 29/60\n",
            "19/19 [==============================] - 0s 2ms/step - loss: 0.2482 - accuracy: 0.5353\n",
            "Epoch 30/60\n",
            "19/19 [==============================] - 0s 2ms/step - loss: 0.2483 - accuracy: 0.5389\n",
            "Epoch 31/60\n",
            "19/19 [==============================] - 0s 2ms/step - loss: 0.2489 - accuracy: 0.5289\n",
            "Epoch 32/60\n",
            "19/19 [==============================] - 0s 2ms/step - loss: 0.2484 - accuracy: 0.5221\n",
            "Epoch 33/60\n",
            "19/19 [==============================] - 0s 2ms/step - loss: 0.2485 - accuracy: 0.5374\n",
            "Epoch 34/60\n",
            "19/19 [==============================] - 0s 3ms/step - loss: 0.2485 - accuracy: 0.5326\n",
            "Epoch 35/60\n",
            "19/19 [==============================] - 0s 2ms/step - loss: 0.2484 - accuracy: 0.5347\n",
            "Epoch 36/60\n",
            "19/19 [==============================] - 0s 3ms/step - loss: 0.2483 - accuracy: 0.5332\n",
            "Epoch 37/60\n",
            "19/19 [==============================] - 0s 2ms/step - loss: 0.2484 - accuracy: 0.5274\n",
            "Epoch 38/60\n",
            "19/19 [==============================] - 0s 2ms/step - loss: 0.2482 - accuracy: 0.5326\n",
            "Epoch 39/60\n",
            "19/19 [==============================] - 0s 3ms/step - loss: 0.2483 - accuracy: 0.5421\n",
            "Epoch 40/60\n",
            "19/19 [==============================] - 0s 2ms/step - loss: 0.2488 - accuracy: 0.5337\n",
            "Epoch 41/60\n",
            "19/19 [==============================] - 0s 2ms/step - loss: 0.2484 - accuracy: 0.5337\n",
            "Epoch 42/60\n",
            "19/19 [==============================] - 0s 2ms/step - loss: 0.2482 - accuracy: 0.5326\n",
            "Epoch 43/60\n",
            "19/19 [==============================] - 0s 2ms/step - loss: 0.2485 - accuracy: 0.5305\n",
            "Epoch 44/60\n",
            "19/19 [==============================] - 0s 2ms/step - loss: 0.2484 - accuracy: 0.5321\n",
            "Epoch 45/60\n",
            "19/19 [==============================] - 0s 3ms/step - loss: 0.2486 - accuracy: 0.5337\n",
            "Epoch 46/60\n",
            "19/19 [==============================] - 0s 2ms/step - loss: 0.2483 - accuracy: 0.5516\n",
            "Epoch 47/60\n",
            "19/19 [==============================] - 0s 2ms/step - loss: 0.2486 - accuracy: 0.5332\n",
            "Epoch 48/60\n",
            "19/19 [==============================] - 0s 2ms/step - loss: 0.2484 - accuracy: 0.5342\n",
            "Epoch 49/60\n",
            "19/19 [==============================] - 0s 2ms/step - loss: 0.2484 - accuracy: 0.5342\n",
            "Epoch 50/60\n",
            "19/19 [==============================] - 0s 2ms/step - loss: 0.2487 - accuracy: 0.5253\n",
            "Epoch 51/60\n",
            "19/19 [==============================] - 0s 3ms/step - loss: 0.2482 - accuracy: 0.5374\n",
            "Epoch 52/60\n",
            "19/19 [==============================] - 0s 2ms/step - loss: 0.2482 - accuracy: 0.5347\n",
            "Epoch 53/60\n",
            "19/19 [==============================] - 0s 2ms/step - loss: 0.2485 - accuracy: 0.5321\n",
            "Epoch 54/60\n",
            "19/19 [==============================] - 0s 2ms/step - loss: 0.2483 - accuracy: 0.5400\n",
            "Epoch 55/60\n",
            "19/19 [==============================] - 0s 2ms/step - loss: 0.2482 - accuracy: 0.5337\n",
            "Epoch 56/60\n",
            "19/19 [==============================] - 0s 2ms/step - loss: 0.2488 - accuracy: 0.5337\n",
            "Epoch 57/60\n",
            "19/19 [==============================] - 0s 3ms/step - loss: 0.2485 - accuracy: 0.5211\n",
            "Epoch 58/60\n",
            "19/19 [==============================] - 0s 3ms/step - loss: 0.2489 - accuracy: 0.5337\n",
            "Epoch 59/60\n",
            "19/19 [==============================] - 0s 2ms/step - loss: 0.2484 - accuracy: 0.5453\n",
            "Epoch 60/60\n",
            "19/19 [==============================] - 0s 2ms/step - loss: 0.2491 - accuracy: 0.5311\n"
          ]
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<keras.callbacks.History at 0x7f06a048ec90>"
            ]
          },
          "metadata": {},
          "execution_count": 39
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "model.evaluate(test.iloc[:,:4],test.iloc[:,4:5])"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "Zr5-lhUpKaMx",
        "outputId": "19090d87-adee-4062-8631-6ef3aa175519"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "15/15 [==============================] - 0s 1ms/step - loss: 0.2465 - accuracy: 0.5684\n"
          ]
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "[0.24646037817001343, 0.5684210658073425]"
            ]
          },
          "metadata": {},
          "execution_count": 40
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "model.evaluate(train.iloc[:,:4],train.iloc[:,4:5])"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "JjJ5XwUXKys3",
        "outputId": "87563c5f-c650-499b-cb6b-08d8c86b3fbf"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "60/60 [==============================] - 0s 1ms/step - loss: 0.2485 - accuracy: 0.5358\n"
          ]
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "[0.24845370650291443, 0.5357894897460938]"
            ]
          },
          "metadata": {},
          "execution_count": 41
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "model.save(\"model.h5\")"
      ],
      "metadata": {
        "id": "7W9uY0xxLsdn"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "prediction=np.where(model.predict(dataUse_.iloc[:,:4])>0.5,1,0)"
      ],
      "metadata": {
        "id": "F7mw_8DMMkpz"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "np.where(np.array([0.3])>0.5,1,0)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "0sOnUu18N_tX",
        "outputId": "edd5f0d6-670d-4b82-9ebb-00b0596085f0"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "array([0])"
            ]
          },
          "metadata": {},
          "execution_count": 45
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "pd.DataFrame(data=prediction).to_csv(\"prediction.csv\")"
      ],
      "metadata": {
        "id": "Ik5h02sUOM1f"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        ""
      ],
      "metadata": {
        "id": "xfLb5YaOOaZ7",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "76298485-7720-42ab-e572-843bb7fd7730"
      },
      "execution_count": 50,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "1000"
            ]
          },
          "metadata": {},
          "execution_count": 50
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        ""
      ],
      "metadata": {
        "id": "btk6Sm1LPZ1K"
      },
      "execution_count": null,
      "outputs": []
    }
  ]
}